* Convert array of arrays to matrix

** Methods

Array of arrays can be created by specifying the initial values, as stated [[https://en.wikibooks.org/wiki/Introducing_Julia/Arrays_and_tuples#Arrays_of_arrays][here]]:

#+BEGIN_SRC julia
a_test = Array[[1,2], [3,4], [5,6]]
#+END_SRC

results:

#+BEGIN_EXAMPLE
2-element Array{Array{T,N},1}:
 [1,2]
 [3,4]
 [5,6]
#+END_EXAMPLE

As you can see, the type is not determined in the above results. So the data types can be specified when creating array of arrays:

#+BEGIN_SRC julia
a_test = Array{Int64, 1}[[1,2],[3,4],[5,6]]
#+END_SRC

results:

#+BEGIN_EXAMPLE
3-element Array{Array{Int64,1},1}:
 [1,2]
 [3,4]
 [5,6]
#+END_EXAMPLE

=a_test= a 1D array of arrays (the inner array is also a 1D array). This array of arrays can be converted to a 2D array using =hcat()= ([[http://stackoverflow.com/questions/26673412/how-to-convert-an-array-of-array-into-a-matrix][reference]]):

#+BEGIN_SRC julia
hcat(a_test...)
#+END_SRC

results:

#+BEGIN_EXAMPLE
2x3 Array{Int64,2}:
 1  3  5
 2  4  6
#+END_EXAMPLE

If you prefer the vectors to be rows, you can =transpose()= the above results or using =vcat()= with transposed inner arrays:

#+BEGIN_SRC julia
vcat([x' for x in a_test]...)
#+END_SRC

results:

#+BEGIN_EXAMPLE
3x2 Array{Int64,2}:
 1  2
 3  4
 5  6
#+END_EXAMPLE

Also, if =a_test= is =Array[[1 2][3 4],[5 6]]= (more precisely, =Array{Int64, 2}[[1 2][3 4],[5 6]]=), =vcat()= can be directly applied.

** More thoughts

Sometimes passing an array as a parameter to a function will obtain results in the form of array of arrays as desribed [[http://stackoverflow.com/questions/26673412/how-to-convert-an-array-of-array-into-a-matrix][here]].

#+BEGIN_SRC julia
phi(x, d) = [x.^i for i=0:d]    # vector-valued function
x = rand(7)                     # vector
y = phi(x, 3)                   # should be matrix, but isn't
#+END_SRC

The author says "Now =y= should be a matrix, but it is an =4-element Array{Array{Float64,1},1}=, i.e. an array of arrays. Actually, I want =y= to be a matrix. Is the implementation of =phi= wrong? Or how do I convert it?"

Based on the answers, these are possible solutions:

1. Convert array of arrays to matrix (see above)
2. Modify the original function to create a matrix instead of array of arrays.
  - Using broadcasting feature of Julia [[http://docs.julialang.org/en/release-0.4/manual/arrays/][Broadcasting reference]]:
  
    #+BEGIN_SRC julia
    phi(x, d) = x.^((0:d)')
    #+END_SRC
    
    As long as =x= is a vector, it will broadcast against the row matrix =(0:d)'=. You can get the transposed result by transposing =x= instead of the range =0:d=.
  
  - Using a two-dimensional array comprehension:
  
    #+BEGIN_SRC julia
    phi(x, d) = [xi.^di for xi in x, di in 0:d]
    #+END_SRC
    
    This will work as long as =x= is iterable. If =x= is an n-d array, it will be interpreted as if it were flattened first. You can transpose the result by switching the order of the comprehension variables:
    
    #+BEGIN_SRC julia
    phi(x, d) = [xi.^di for di in 0:d, xi in x]
    #+END_SRC
